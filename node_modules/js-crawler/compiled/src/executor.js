"use strict";
/*
 * Executor that handles throttling and task processing rate.
 */
Object.defineProperty(exports, "__esModule", { value: true });
class AsynchronousExecutor {
    constructor({ maxRatePerSecond, maxConcurrentTasks }) {
        this.maxRatePerSecond = maxRatePerSecond;
        this.maxConcurrentTasks = maxConcurrentTasks || Number.MAX_VALUE;
        this.concurrentTaskNumber = 0;
        this.queue = [];
        this.isStopped = false;
        this.timeoutMs = (1 / this.maxRatePerSecond) * 1000;
    }
    submit(task) {
        this.queue.push(task);
    }
    start() {
        this.processQueueItem();
    }
    stop() {
        this.isStopped = true;
    }
    hasTooManyConcurrentTasks() {
        return this.concurrentTaskNumber >= this.maxConcurrentTasks;
    }
    processQueueItem() {
        if (this.isStopped) {
            return;
        }
        if (!this.hasTooManyConcurrentTasks()) {
            if (this.queue.length !== 0) {
                const nextExecution = this.queue.shift();
                this.concurrentTaskNumber++;
                nextExecution().then(() => {
                    this.concurrentTaskNumber--;
                });
            }
        }
        setTimeout(() => {
            this.processQueueItem();
        }, this.timeoutMs);
    }
}
exports.default = AsynchronousExecutor;
//# sourceMappingURL=executor.js.map