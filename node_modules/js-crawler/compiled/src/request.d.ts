import { HttpResponse } from './response';
export interface RequestOptions {
    referer: string;
    url: string;
    userAgent: string;
}
export interface RequestSuccess {
    visitedUrls: string[];
    lastVisitedUrl: string;
    response: HttpResponse;
}
export interface RequestFailure {
    error: any;
    response: HttpResponse;
}
export interface HttpClientRequestOptions {
    url: string;
    encoding: string;
    rejectUnauthorized: boolean;
    followRedirect: boolean;
    followAllRedirects: boolean;
    headers: {
        'User-Agent': string;
        'Referer': string;
    };
}
export declare type HttpClient = (requestOptions: HttpClientRequestOptions, callback: (error: any, response: HttpResponse) => void) => void;
export interface Request {
    submit: () => Promise<RequestSuccess>;
}
export default class DefaultRequest implements Request {
    options: RequestOptions;
    httpClient: HttpClient;
    constructor(options: RequestOptions, httpClient?: HttpClient);
    submit(): Promise<RequestSuccess>;
}
