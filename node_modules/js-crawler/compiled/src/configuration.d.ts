import { HttpResponse, UrlCrawlingBehavior } from './response';
export interface UrlCrawlingResult {
    url: string;
    status: number;
    content: string;
    error: any;
    response: HttpResponse;
    body: string;
    referer: string;
}
export declare type SuccessCallback = (crawlingResult: UrlCrawlingResult) => void;
export declare type FailureCallback = (crawlingResult: UrlCrawlingResult) => void;
export declare type FinishedCallback = (crawledUrls: string[]) => void;
export interface CrawlOptions {
    depth?: number;
    ignoreRelative?: boolean;
    userAgent?: string;
    maxConcurrentRequests?: number;
    maxRequestsPerSecond?: number;
    shouldCrawl?: (url: string) => boolean;
    shouldCrawlLinksFrom?: (url: string) => boolean;
}
export interface CrawlCallbacks {
    success: SuccessCallback;
    failure: FailureCallback;
    finished: FinishedCallback;
}
export declare type ConfigurationOptions = CrawlOptions & CrawlCallbacks;
export declare const DEFAULT_OPTIONS: ConfigurationOptions;
export default class Configuration {
    config: ConfigurationOptions;
    constructor();
    configure(options: CrawlOptions): void;
    readonly options: CrawlOptions;
    readonly crawlingBehavior: UrlCrawlingBehavior;
    readonly callbacks: CrawlCallbacks;
    updateAndReturnUrl(urlOrOptions: CrawlCallbacks & {
        url: string;
    } | string, success?: SuccessCallback, failure?: FailureCallback, finished?: FinishedCallback): string;
}
