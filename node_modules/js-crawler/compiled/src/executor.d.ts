export declare type ExecutableTask = () => Promise<void>;
export interface ExecutorOptions {
    maxRatePerSecond: number;
    maxConcurrentTasks: number;
}
export interface Executor {
    start: () => void;
    submit: (task: ExecutableTask) => void;
    stop: () => void;
}
export default class AsynchronousExecutor implements Executor {
    maxRatePerSecond: number;
    maxConcurrentTasks: number;
    concurrentTaskNumber: number;
    queue: Array<ExecutableTask>;
    isStopped: boolean;
    timeoutMs: number;
    constructor({maxRatePerSecond, maxConcurrentTasks}: ExecutorOptions);
    submit(task: ExecutableTask): void;
    start(): void;
    stop(): void;
    hasTooManyConcurrentTasks(): boolean;
    processQueueItem(): void;
}
