"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const configuration_1 = require("../src/configuration");
const _ = require('underscore');
const chai_1 = require("chai");
describe('configuration', () => {
    const url = 'url';
    let configuration;
    describe('default options', () => {
        const nonDefaultDepth = 100;
        beforeEach(() => {
            configuration = new configuration_1.default();
            configuration.configure({
                depth: nonDefaultDepth
            });
        });
        it('should use defaults if value is missing', () => {
            chai_1.expect(configuration.options.depth).to.eql(nonDefaultDepth);
            chai_1.expect(configuration.options.maxConcurrentRequests).to.eql(configuration_1.DEFAULT_OPTIONS.maxConcurrentRequests);
        });
        it('should crawl all urls by default', () => {
            chai_1.expect(configuration.options.shouldCrawl(url)).to.eql(true);
        });
        it('should crawl links from all the urls by default', () => {
            chai_1.expect(configuration.options.shouldCrawlLinksFrom(url)).to.eql(true);
        });
    });
    describe('depth option', () => {
        it('should use 0 if value is negative', () => {
            configuration = new configuration_1.default();
            configuration.configure({
                depth: -1
            });
            chai_1.expect(configuration.options.depth).to.eql(0);
        });
    });
    describe('properties', () => {
        it('should return "options"', () => {
            configuration = new configuration_1.default();
            chai_1.expect(configuration.options).to.eql(_.omit(configuration_1.DEFAULT_OPTIONS, ['success', 'failure', 'finished']));
        });
        it('should return "crawlingBehavior"', () => {
            configuration = new configuration_1.default();
            chai_1.expect(configuration.crawlingBehavior).to.eql(_.pick(configuration_1.DEFAULT_OPTIONS, ['ignoreRelative', 'shouldCrawl']));
        });
        it('should return "callbacks"', () => {
            configuration = new configuration_1.default();
            chai_1.expect(configuration.callbacks).to.eql(_.pick(configuration_1.DEFAULT_OPTIONS, ['success', 'failure', 'finished']));
        });
    });
    describe('update crawling callbacks and return url', () => {
        const success = _.noop;
        const failure = _.noop;
        const finished = _.noop;
        it('should allow to provide options as separate arguments', () => {
            configuration = new configuration_1.default();
            const returnedUrl = configuration.updateAndReturnUrl(url, success, failure, finished);
            chai_1.expect(returnedUrl).to.eql(url);
            chai_1.expect(configuration.callbacks).to.eql({
                success,
                failure,
                finished
            });
        });
        it('should allow to use the options API', () => {
            configuration = new configuration_1.default();
            const returnedUrl = configuration.updateAndReturnUrl({ url, success, failure, finished });
            chai_1.expect(returnedUrl).to.eql(url);
            chai_1.expect(configuration.callbacks).to.eql({
                success,
                failure,
                finished
            });
        });
    });
});
//# sourceMappingURL=configuration.spec.js.map